<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
  "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
  "http://checkstyle.sourceforge.net/dtds/configuration_1_3.dtd">

<!--
    Checkstyle configuration that checks the Google coding conventions from Google Java Style
    that can be found at https://google.github.io/styleguide/javaguide.html.

    Checkstyle is very configurable. Be sure to read the documentation at
    http://checkstyle.sf.net (or in your downloaded distribution).

    To completely disable a check, just comment it out or delete it from the file.

    Authors: Max Vetrenko, Ruslan Diachenko, Roman Ivanov.
 -->

<module name="Checker">
  <property name="charset" value="UTF-8"/>
  <property name="severity" value="error"/>

  <property name="fileExtensions" value="java, properties, xml"/>

  <!-- Checks for whitespace                               -->
  <!-- See http://checkstyle.sf.net/config_whitespace.html -->
  <module name="FileTabCharacter">
    <property name="eachLine" value="true"/>
  </module>
  <module name="NewlineAtEndOfFile"> <!-- Java Style Guide: Line ending: LF -->
    <property name="lineSeparator" value="lf"/>
  </module>

  <module name="RegexpSingleline"> <!-- Palantir custom -->
    <property name="format" value="\s+$"/>
    <property name="message" value="Whitespace at end-of-line"/>
  </module>


  <module name="TreeWalker">
    <module name="AbbreviationAsWordInName"> <!-- Java Style Guide: Camel case : defined -->
      <property name="ignoreFinal" value="false"/>
      <property name="allowedAbbreviationLength" value="1"/>
    </module>
    <module name="AnnotationLocation"> <!-- Java Style Guide: Annotations -->
      <property name="id" value="AnnotationLocationMostCases"/>
      <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF"/>
    </module>
    <module name="AnnotationLocation"> <!-- Java Style Guide: Annotations -->
      <property name="id" value="AnnotationLocationVariables"/>
      <property name="tokens" value="VARIABLE_DEF"/>
      <property name="allowSamelineMultipleAnnotations" value="true"/>
    </module>
    <module name="ArrayTypeStyle"/> <!-- Java Style Guide: No C-style array declarations -->
    <module name="AtclauseOrder">
      <property name="tagOrder" value="@param, @return, @throws, @deprecated"/>
      <property name="target" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
    </module>
    <module name="AvoidEscapedUnicodeCharacters"> <!-- Java Style Guide: Non-ASCII characters -->
      <property name="allowEscapesForControlCharacters" value="true"/>
      <property name="allowByTailComment" value="true"/>
      <property name="allowNonPrintableEscapes" value="true"/>
    </module>
    <module name="AvoidStarImport"/> <!-- Java Style Guide: No wildcard imports -->
    <module name="CatchParameterName">
      <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
      <message key="name.invalidPattern" value="Catch parameter name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <module name="ClassTypeParameterName"> <!-- Java Style Guide: Type variable names -->
      <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
      <message key="name.invalidPattern" value="Class type name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <module name="CommentsIndentation"/>
    <module name="CovariantEquals"/> <!-- Java Coding Guidelines: Override ``Object#equals`` consistently -->
    <module name="CustomImportOrder">
      <property name="sortImportsInGroupAlphabetically" value="true"/>
      <property name="separateLineBetweenGroups" value="true"/>
      <property name="customImportOrderRules" value="STATIC###THIRD_PARTY_PACKAGE"/>
    </module>

    <module name="CyclomaticComplexity"/> <!-- Java Coding Guidelines: Reduce Cyclomatic Complexity -->

    <module name="DefaultComesLast"/> <!-- Java Style Guide: The default case is present -->
    <module name="EmptyBlock"> <!-- Java Style Guide: Empty blocks: documented -->
      <property name="option" value="TEXT"/>
      <property name="tokens" value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"/>
    </module>
    <module name="EmptyCatchBlock"> <!-- Java Style Guide: Empty blocks: documented -->
      <property name="exceptionVariableName" value="expected"/>
    </module>
    <module name="EmptyLineSeparator"> <!-- Java Style Guide: Source file structure -->
      <property name="allowNoEmptyLineBetweenFields" value="true"/>
    </module>
    <module name="EmptyStatement"/> <!-- Java Style Guide: One statement per line -->
    <module name="EqualsHashCode"/>
    <module name="FallThrough"/> <!-- Java Style Guide: Fall-through: commented -->
    <module name="GenericWhitespace"> <!-- Java Style Guide: Horizontal whitespace -->
      <message key="ws.followed" value="GenericWhitespace ''{0}'' is followed by whitespace."/>
      <message key="ws.preceded" value="GenericWhitespace ''{0}'' is preceded with whitespace."/>
      <message key="ws.illegalFollow" value="GenericWhitespace ''{0}'' should followed by whitespace."/>
      <message key="ws.notPreceded" value="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
    </module>
    <module name="HideUtilityClassConstructor"/> <!-- Java Coding Guidelines: Private constructors -->
    <module name="IllegalImport">
      <property name="illegalPkgs" value="org.apache.commons.lang"/>
      <message key="import.illegal" value="lang is deprecated, use lang3 instead."/>
    </module>
    <module name="IllegalImport">
      <property name="illegalPkgs" value="org.apache.commons.math"/>
      <message key="import.illegal" value="math is deprecated, use math3 instead."/>
    </module>
    <module name="IllegalImport">
      <property name="illegalPkgs" value="org.apache.log4j, org.apache.logging.log4j, java.util.logging, ch.qos.logback"/>
      <message key="import.illegal" value="Use SLF4J instead of a logging framework directly."/>
    </module>
    <module name="IllegalInstantiation"> <!-- Java Coding Guidelines: Never instantiate primitive types -->
      <property name="classes" value="java.lang.Boolean"/>
      <property name="classes" value="java.lang.Byte"/>
      <property name="classes" value="java.lang.Character"/>
      <property name="classes" value="java.lang.Double"/>
      <property name="classes" value="java.lang.Float"/>
      <property name="classes" value="java.lang.Integer"/>
      <property name="classes" value="java.lang.Long"/>
    </module>
    <module name="IllegalThrows"/> <!-- Java Coding Guidelines: Throwable, Error, RuntimeException: Not declared -->
    <module name="IllegalTokenText"> <!-- Java Style Guide: Special escape sequences -->
      <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
      <property name="format" value="\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
      <property name="message" value="Consider using special escape sequence instead of octal value or Unicode escaped value."/>
    </module>
    <module name="IllegalType"> <!-- Java Coding Guide: Limit coupling on concrete classes -->
      <property name="illegalClassNames" value="java.util.HashSet, java.util.HashMap, java.util.LinkedHashMap, java.util.LinkedHashSet, java.util.TreeSet, java.util.TreeMap, com.google.common.collect.ArrayListMultimap, com.google.common.collect.ForwardingListMultimap, com.google.common.collect.ForwardingMultimap, com.google.common.collect.ForwardingSetMultimap, com.google.common.collect.ForwardingSortedSetMultimap, com.google.common.collect.HashMultimap, com.google.common.collect.LinkedHashMultimap, com.google.common.collect.LinkedListMultimap, com.google.common.collect.TreeMultimap"/>
    </module>
    <module name="Indentation"> <!-- Java Style Guide: Block indentation: +4 spaces -->
      <property name="basicOffset" value="2"/>
      <property name="braceAdjustment" value="0"/>
      <property name="caseIndent" value="2"/>
      <property name="throwsIndent" value="4"/>
      <property name="lineWrappingIndentation" value="4"/>
      <property name="arrayInitIndent" value="2"/>
    </module>
    <module name="InnerAssignment"/> <!-- Java Coding Guidelines: Inner assignments: Not used -->
    <module name="InterfaceTypeParameterName">
      <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
      <message key="name.invalidPattern" value="Interface type name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <module name="JavadocMethod">
      <property name="scope" value="public"/>
      <property name="allowMissingParamTags" value="true"/>
      <property name="allowMissingThrowsTags" value="true"/>
      <property name="allowMissingReturnTag" value="true"/>
      <property name="minLineCount" value="2"/>
      <property name="allowedAnnotations" value="Override, Test"/>
      <property name="allowThrowsTagsForSubclasses" value="true"/>

      <property name="allowMissingJavadoc" value="true"/>
    </module>
    <module name="JavadocParagraph"/>
    <module name="JavadocTagContinuationIndentation"/>
    <module name="LeftCurly"/>
    <module name="LineLength"> <!-- Java Style Guide: No line-wrapping -->
      <property name="max" value="120"/>
      <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
    </module>
    <module name="LocalVariableName">
      <property name="tokens" value="VARIABLE_DEF"/>
      <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
      <message key="name.invalidPattern" value="Local variable name ''{0}'' must match pattern ''{1}''."/>
    </module>

    <module name="MethodLength"/> <!-- Java Coding Guide: Methods and functions: focused, crisp, concise -->
    <module name="MemberName">
      <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
      <message key="name.invalidPattern" value="Member name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <module name="MethodName">
      <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9_]*$"/>
      <message key="name.invalidPattern" value="Method name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <module name="MethodParamPad"/>
    <module name="MethodTypeParameterName">
      <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
      <message key="name.invalidPattern" value="Method type name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <module name="MissingSwitchDefault"/>
    <module name="ModifiedControlVariable"/> <!-- Java Coding Guide: For-loop control variables: never modified -->
    <module name="ModifierOrder"/> <!-- Java Style Guide: Modifiers -->
    <module name="MultipleVariableDeclarations"/> <!-- Java Style Guide: One variable per declaration -->
    <module name="NeedBraces"/> <!-- Java Style Guide: Braces are used where optional -->

    <module name="NestedForDepth">
      <property name="max" value="2"/>
    </module>
    <module name="NestedTryDepth"/> <!-- Java Coding Guide: Try/catch blocks: never nested -->

    <module name="NoClone"/> <!-- Java Coding Guidelines: Never override Object#finalize or Object#clone -->
    <module name="NoFinalizer"/> <!-- Java Coding Guidelines: Never override Object#finalize -->
    <module name="NoLineWrap"/> <!-- Java Style Guide: No line-wrapping -->
    <module name="NoWhitespaceBefore"> <!-- Java Style Guide: Horizontal whitespace -->
      <property name="tokens" value="COMMA, SEMI, POST_INC, POST_DEC, DOT, ELLIPSIS, METHOD_REF"/>
      <property name="allowLineBreaks" value="true"/>
    </module>
    <module name="NonEmptyAtclauseDescription"/>
    <module name="OneStatementPerLine"/> <!-- Java Style Guide: One statement per line -->
    <module name="OneTopLevelClass"/> <!-- Java Style Guide: Exactly one top-level class declaration -->
    <module name="OperatorWrap"> <!-- Java Style Guide: Where to break -->
      <property name="option" value="NL"/>
      <property name="tokens"
        value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR,                     LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR, METHOD_REF "/>
    </module>
    <module name="OuterTypeFilename"/> <!-- Java Style Guide: File name -->
    <module name="OverloadMethodsDeclarationOrder"/> <!-- Java Style Guide: Overloads: never split -->
    <module name="PackageName"> <!-- Java Style Guide: Package names -->
      <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
      <message key="name.invalidPattern" value="Package name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <module name="ParameterAssignment"/> <!-- Java Coding Guidelines: Final variables and parameters -->
    <module name="ParameterName">
      <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
      <message key="name.invalidPattern" value="Parameter name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <module name="ParenPad"/> <!-- Java Style Guide: Horizontal whitespace -->
    <module name="RedundantImport"/> <!-- Java Style Guide: No unused imports -->
    <module name="RedundantModifier"/> <!-- Java Coding Guidelines: Avoid redundant modifiers -->

    <!--Palantir collections-->
    <module name="RegexpSinglelineJava"> <!-- Java Coding Guidelines: Use appropriate assertion methods -->
      <property name="format" value="assertEquals\(false,"/>
      <property name="message" value="Use assertFalse() instead."/>
    </module>
    <module name="RegexpSinglelineJava"> <!-- Java Coding Guidelines: Use appropriate assertion methods -->
      <property name="format" value="assertEquals\(null,"/>
      <property name="message" value="Use assertNull() instead."/>
    </module>
    <module name="RegexpSinglelineJava"> <!-- Java Coding Guidelines: Use appropriate assertion methods -->
      <property name="format" value="assertEquals\(true,"/>
      <property name="message" value="Use assertTrue() instead."/>
    </module>
    <module name="RegexpSinglelineJava"> <!-- Java Coding Guidelines: Use appropriate assertion methods -->
      <property name="format" value="assertFalse\(.*[!=]="/>
      <property name="message" value="Use better assertion method(s): assertEquals(), assertNull(), assertSame(), etc."/>
    </module>
    <module name="RegexpSinglelineJava"> <!-- Java Coding Guidelines: Use appropriate assertion methods -->
      <property name="format" value="assertTrue\(!"/>
      <property name="message" value="Use assertFalse()."/>
    </module>
    <module name="RegexpSinglelineJava"> <!-- Java Coding Guidelines: Use appropriate assertion methods -->
      <property name="format" value="assertTrue\(.*[!=]="/>
      <property name="message" value="Use better assertion method(s): assertEquals(), assertNull(), assertSame(), etc."/>
    </module>
    <module name="RegexpSinglelineJava"> <!-- Java Coding Guidelines: Avoid Generics clutter where possible -->
      <property name="format" value="Collections\.EMPTY_LIST"/>
      <property name="message" value="Use Collections.emptyList() or, better, ImmutableList.of()."/>
    </module>
    <module name="RegexpSinglelineJava"> <!-- Java Coding Guidelines: Avoid Generics clutter where possible -->
      <property name="format" value="Collections\.EMPTY_MAP"/>
      <property name="message" value="Use Collections.emptyMap() or, better, ImmutableMap.of()."/>
    </module>
    <module name="RegexpSinglelineJava"> <!-- Java Coding Guidelines: Avoid Generics clutter where possible -->
      <property name="format" value="Collections\.EMPTY_SET"/>
      <property name="message" value="Use Collections.emptySet() or, better, ImmutableSet.of()."/>
    </module>
    <module name="RegexpSinglelineJava"> <!-- Java Coding Guidelines: Use appropriate assertion methods -->
      <property name="format" value="CoreMatchers\.equalTo"/>
      <property name="message" value="Use Assert.assertEquals()."/>
    </module>
    <module name="RegexpSinglelineJava"> <!-- Java Coding Guidelines: Use appropriate assertion methods -->
      <property name="format" value="CoreMatchers\.notNull"/>
      <property name="message" value="Use better assertion method(s): Assert.assertEquals(), assertNull(), assertSame(), etc."/>
    </module>
    <module name="RegexpSinglelineJava"> <!-- Java Coding Guidelines: Avoid Generics clutter where possible -->
      <property name="format" value="ImmutableList\.Builder.*new ImmutableList\.Builder"/>
      <property name="message" value="Use ImmutableList.builder() for variable assignment."/>
    </module>
    <module name="RegexpSinglelineJava"> <!-- Java Coding Guidelines: Avoid Generics clutter where possible -->
      <property name="format" value="ImmutableMap\.Builder.*new ImmutableMap\.Builder"/>
      <property name="message" value="Use ImmutableMap.builder() for variable assignment."/>
    </module>
    <module name="RegexpSinglelineJava"> <!-- Java Coding Guidelines: Avoid Generics clutter where possible -->
      <property name="format" value="ImmutableSet\.Builder.*new ImmutableSet\.Builder"/>
      <property name="message" value="Use ImmutableSet.builder() for variable assignment."/>
    </module>
    <module name="RegexpSinglelineJava"> <!-- Java Coding Guidelines: Check parameters for validity -->
      <property name="format" value="Preconditions\.checkNotNull\((?!.*,)([^()]*(\(([^()]*|\(([^()]*|\([^()]*\))*\))*\)[^()]*)*)\)"/>
      <property name="message" value="Use Preconditions.checkNotNull(Object, String)."/>
    </module>
    <module name="RegexpSinglelineJava"> <!-- Java Coding Guidelines: Check parameters for validity -->
      <property name="format" value="Validate\.notNull\((?!.*,)([^()]*(\(([^()]*|\(([^()]*|\([^()]*\))*\))*\)[^()]*)*)\)"/>
      <property name="message" value="Use Validate.notNull(Object, String)."/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value="^\s*super\(\);"/>
      <property name="message" value="This is unnecessary; please delete."/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value="@return.*\.$"/>
      <property name="message" value="Please delete the period."/>
    </module>
    <module name="RegexpSinglelineJava"> <!-- Java Style Guide: Horizontal whitespace -->
      <property name="format" value="\s+$"/>
      <property name="message" value="Trailing whitespace is not allowed."/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value="\? extends Object\W"/>
      <property name="message" value="Use ? rather than ? extends Object."/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value="\bPreconditions\.check.*\{\}"/>
      <property name="message" value="Use printf-style formatting in Preconditions, not '{}' style formatting."/>
      <property name="ignoreComments" value="true"/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value="(?i)log(ger)?\.(debug|info|warn|error)\(.*%[sd]"/>
      <property name="message" value="SLF4J loggers support '{}' style formatting."/>
      <property name="ignoreComments" value="true"/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value="\.printStackTrace\(\)"/>
      <property name="message" value="printStackTrace is not generally allowed."/>
      <property name="ignoreComments" value="true"/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value="\bCharsets\."/>
      <property name="message" value="Use JDK StandardCharsets instead of alternatives."/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value="\bCharset.defaultCharset\("/>
      <property name="message" value="Use explicit charset (e.g. StandardCharsets.UTF-8) instead of default."/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value="\bIOUtils\.toString\("/>
      <property name="message" value="Prefer Guava''s [CharStreams,Files,Resources].toString to avoid charset/stream closing issues."/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value="static enum"/>
      <property name="message" value="Redundant ''static'' modifier."/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value="(\/\/TODO)|(\/\/ TODO:)|(\/\/ TODO\(\))|(\/\/ TODO\(.*\):[^ ])|(\/\/ TODO\(.*\)[^:])"/>
      <property name="message" value="TODO format: // TODO(flastname): explanation"/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value="(void setUp\(\))|(void setup\(\))|(void setupStatic\(\))|(void setUpStatic\(\))|(void beforeTest\(\))|(void teardown\(\))|(void tearDown\(\))|(void beforeStatic\(\))|(void afterStatic\(\))"/>
      <property name="message" value="Test setup/teardown methods are called before(), beforeClass(), after(), afterClass(), but not setUp, teardown, etc."/>
    </module>


    <module name="RightCurly">
      <property name="id" value="RightCurlySame"/>
      <property name="tokens"
        value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE,                     LITERAL_DO"/>
    </module>
    <module name="RightCurly">
      <property name="id" value="RightCurlyAlone"/>
      <property name="option" value="alone"/>
      <property name="tokens"
        value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT,                     INSTANCE_INIT"/>
    </module>
    <module name="SeparatorWrap"> <!-- Java Style Guide: Where to break -->
      <property name="id" value="SeparatorWrapDot"/>
      <property name="tokens" value="DOT"/>
      <property name="option" value="nl"/>
    </module>
    <module name="SeparatorWrap"> <!-- Java Style Guide: Where to break -->
      <property name="id" value="SeparatorWrapComma"/>
      <property name="tokens" value="COMMA"/>
      <property name="option" value="EOL"/>
    </module>
    <module name="SeparatorWrap"> <!-- Java Style Guide: Where to break -->
      <property name="id" value="SeparatorWrapEllipsis"/>
      <property name="tokens" value="ELLIPSIS"/>
      <property name="option" value="EOL"/>
    </module>
    <module name="SeparatorWrap"> <!-- Java Style Guide: Where to break -->
      <property name="id" value="SeparatorWrapArrayDeclarator"/>
      <property name="tokens" value="ARRAY_DECLARATOR"/>
      <property name="option" value="EOL"/>
    </module>
    <module name="SeparatorWrap"> <!-- Java Style Guide: Where to break -->
      <property name="id" value="SeparatorWrapMethodRef"/>
      <property name="tokens" value="METHOD_REF"/>
      <property name="option" value="nl"/>
    </module>

    <module name="SimplifyBooleanExpression"/> <!-- Java Coding Guidelines: Keep Boolean expressions simple -->


    <module name="SingleLineJavadoc">
      <property name="ignoreInlineTags" value="false"/>
    </module>
    <module name="StringLiteralEquality"/> <!-- Java Coding Guidelines: String equality: use String#equals -->
    <module name="SummaryJavadoc">
      <property name="forbiddenSummaryFragments"
        value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )"/>
    </module>
    <module name="SuperClone"/>

    <module name="SuppressionCommentFilter">
      <property name="offCommentFormat" value="CHECKSTYLE.OFF\: ([\w\|]+)"/>
      <property name="onCommentFormat" value="CHECKSTYLE.ON\: ([\w\|]+)"/>
      <property name="checkFormat" value="$1"/>
    </module>

    <module name="TypeName"> <!-- Java Style Guide: Class names -->
      <message key="name.invalidPattern" value="Type name ''{0}'' must match pattern ''{1}''."/>
    </module>

    <module name="UnusedImports"> <!-- Java Style Guide: No unused imports -->
      <property name="processJavadoc" value="true"/>
    </module>

    <module name="UpperEll"/> <!-- Java Style Guide: Numeric Literals -->
    <module name="VariableDeclarationUsageDistance"/>
    <module name="WhitespaceAfter"/> <!-- Java Style Guide: Horizontal whitespace -->
    <module name="WhitespaceAround">
      <property name="allowEmptyConstructors" value="true"/>
      <property name="allowEmptyMethods" value="true"/>
      <property name="allowEmptyTypes" value="true"/>
      <property name="allowEmptyLoops" value="true"/>
      <message key="ws.notFollowed"
        value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)"/>
      <message key="ws.notPreceded" value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
    </module>
  </module>

</module>
